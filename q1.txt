-- Q1: Complete Program for Hospital Patient Records

module Main where

import System.IO (hFlush, stdout)

-- Type alias for a patient record
type Patient = (String, Int, Int) -- (PatientName, Age, ReasonCode)

-- Function 1: Using predefined values
samplePatients :: [Patient]
samplePatients = [("John Smith", 45, 1), ("Jane Doe", 67, 2), ("Peter Pan", 12, 1), 
                  ("Mary Poppins", 38, 3), ("Clark Kent", 35, 2), ("Lois Lane", 34, 1),
                  ("Bruce Wayne", 41, 3)]

-- Function 2: Getting input from the user
readPatientData :: IO [Patient]
readPatientData = do
  putStr "Enter patient name (or type 'done' to finish): "
  hFlush stdout
  name <- getLine
  if name == "done"
    then return []
    else do
      putStr "Enter age: "
      hFlush stdout
      ageStr <- getLine
      putStr "Enter Reason Code (1=Checkup, 2=Emergency, 3=Surgery): "
      hFlush stdout
      reasonStr <- getLine
      let age = read ageStr :: Int
      let reason = read reasonStr :: Int
      restOfPatients <- readPatientData
      return ((name, age, reason) : restOfPatients)

-- ## Analysis Logic ##

countByReason :: [Patient] -> Int -> Int
countByReason [] _ = 0
countByReason ((_, _, reason):xs) targetReason
  | reason == targetReason = 1 + countByReason xs targetReason
  | otherwise              = countByReason xs targetReason

countAdults :: [Patient] -> Int
countAdults [] = 0
countAdults ((_, age, _):xs)
  | age >= 18 = 1 + countAdults xs
  | otherwise = countAdults xs

-- ## Main Execution ##

main :: IO ()
main = do
  putStrLn "--- Q1: Hospital Patient Records Analysis ---"
  putStr "Use (s)ample data or provide (i)nput? "
  hFlush stdout
  choice <- getLine
  
  -- Choose the data source based on user input
  patients <- if choice == "i"
                then readPatientData
                else return samplePatients
  
  -- Perform and display the analysis
  let generalCount = countByReason patients 1
  let emergencyCount = countByReason patients 2
  let surgeryCount = countByReason patients 3
  let adultCount = countAdults patients
  
  putStrLn "\n--- Analysis Report ---"
  putStrLn $ "General Checkup (Code 1) Patients: " ++ show generalCount
  putStrLn $ "Emergency (Code 2) Patients: " ++ show emergencyCount
  putStrLn $ "Surgery (Code 3) Patients: " ++ show surgeryCount
  putStrLn $ "Total Number of Adult Patients: " ++ show adultCount


## Q1: Hospital Patient Records - Sample Inputs
Scenario 1: Use the predefined sample data
This is the simplest option. The program will use the list of patients already written in the code.

Paste this into the STDIN box:

s
Scenario 2: Enter two new patients manually
This tells the program you want to provide input (i), then you enter the details for two patients, and finally, you type done to finish and see the report.

Paste this into the STDIN box:

i
John Doe
45
1
Jane Smith
67
2
done
